<!DOCTYPE html>
<html lang="ko">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="stylesheets/style.css">
    <link rel="stylesheet" href="library/bootstrap/css/bootstrap.min.css">
    <script src="library/jquery/jquery.min.js"></script>
    <script src="library/sweetalert.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css"
        rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

    <title>Twitch Chat Raffle</title>
</head>

<body>
    <div class="main">
        <div>
            <a href="https://twitchapps.com/tmi/" target="_blank">
                <img id="logo-img" src="/images/logo.png" />
            </a>
            <h1> <%= pageTitle %>  Ïùò Ï±ÑÌåÖ ÎùºÌîå Î¶¨ÎçîÎ≥¥Îìú</h1>
            <input id="onoff-btn" type="checkbox" checked data-toggle="toggle">
            <button id="setting-btn" type="button" class="btn action-btn" data-toggle="modal"
                data-target="#settingModal">Setting</button><!-- Button trigger modal -->
            <button id="raffle-btn" type="button" class="btn action-btn">Raffle</button>
        </div>
        <!-- <ul class="list-group list-group-horizontal">
            <li class="list-group-item">#1</li>
            <li class="list-group-item">qlgks1</li>
            <li class="list-group-item">50</li>
        </ul> -->
    </div>

    <!-- Modal -->
    <div class="modal fade" id="settingModal" tabindex="-1" role="dialog" aria-labelledby="settingModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingModalLabel">Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÇ¨Ìï≠</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <form id="setting-request-form">
                        <div class="form-group">
                            <label for="input-nick-name" class="col-form-label">Nick Name:</label>
                            <input type="text" class="form-control" id="input-nick-name">
                        </div>
                        <div class="form-group">
                            <label for="input-oauth-token" class="col-form-label">OAuth Token:</label>
                            <input type="text" class="form-control" id="input-oauth-token"></input>
                        </div>
                        <div class="form-group">
                            <label for="input-channel-name" class="col-form-label">Channel Name:</label>
                            <input type="text" class="form-control" id="input-channel-name"></input>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="setting-request-btn" type="button" class="btn btn-primary">Update</button>
                </div>
            </div>
        </div>
    </div>
    <script src="library/bootstrap/js/bootstrap.min.js"></script>
</body>
<script>


    // GET static DOM 
    const randerTarget = document.querySelector(".main");
    const settingBtn = document.getElementById("setting-btn");
    const raffleBtn = document.getElementById("raffle-btn");

    // AJAX Custom
    const ajaxCustom = (url, type, body, next) => {
        if (type === "GET") {
            $.ajax({
                url: url,
                type: type,
                dataType: 'json',
                success: function (response) {
                    next(response);
                },
                error: function (e) {
                    swal("Fail", `${e['result']}!`, "error");
                }
            });
        }
        else {
            $.ajax({
                url: url,
                type: type,
                dataType: 'json',
                data: body,
                success: function (response) {
                    next(response);
                },
                error: function (e) {
                    swal("Fail", `${e['result']}!`, "error");
                }
            });
        }
    }

    // on / off -> /api/onoff with body.status
    // GET Status of On Off
    ajaxCustom("/api/on-off", "GET", null, (response) => {
        if (response['result']) 
            $('#onoff-btn').bootstrapToggle('on');
        else 
            $('#onoff-btn').bootstrapToggle('off');

        // add Event
        $('#onoff-btn').change(function () {
            const status = { "status": $(this).prop('checked') }
            ajaxCustom("api/on-off", "PUT", status, (response) => {
                swal("Success", `${response['result']}`, "success");
            });
        });
    });

    // setting -> /api/config with body
    // setting-request-form -> input-nick-name / input-oauth-token / input-channel-name
    settingBtn.addEventListener('click', () => {
        ajaxCustom("/api/config", "GET", null, (response) => {
            // 1. get and setting up information
            const targetModal = document.getElementById("settingModal");
            targetModal.querySelector("#input-nick-name").value = response['result']['nick_name'];
            targetModal.querySelector("#input-oauth-token").value = response['result']['oauth_token'];
            targetModal.querySelector("#input-channel-name").value = response['result']['channel_name'];

        });
    });
    document.getElementById("setting-request-btn").addEventListener('click', () => {
        const formData = document.getElementById("setting-request-form");
        const body = {
            nick_name: formData.querySelector("#input-nick-name").value,
            oauth_token: formData.querySelector("#input-oauth-token").value,
            channel_name: formData.querySelector("#input-channel-name").value,   
        };
        // request for config update
        ajaxCustom("/api/config", "PUT", body, (response) => {
            swal("Success", `${response['result']}`, "success");
        });
    });


    // raffle 
    raffleBtn.addEventListener('click', () => {
        ajaxCustom("/api/prize", "GET", null, (response) => {
            swal({
                title: "üî• ÎãπÏ≤®ÏûêÎäî ÏïÑÎûòÏôÄ Í∞ôÏäµÎãàÎã§! üî•",
                text: `${response["result"]["_id"]} Îãò Ï∂ïÌïòÌï©ÎãàÎã§! \n \"OK\" Î•º ÎàÑÎ•¥Î©¥ ÌôïÏ†ïÏù¥ ÎêòÍ≥†, ÎÇ¥Ïó≠Ïù¥ Ï†ÄÏû•Îê©ÎãàÎã§.`,
                icon: "success",
                buttons: true,
            })
            .then((willDelete) => {
                if (willDelete) {
                    const body = {
                        "comment":"ÎãπÏ≤®Ïûê Ï†ÄÏû•",
                        "username":response["result"]["_id"]
                    };
                    ajaxCustom("api/prize/init", "POST", body, (response) => {
                        swal("ÎùºÌîå ÎÇ¥Ïö©Ïù¥ Ï†ÄÏû• ÎêòÏóàÍ≥†, ÎåÄÌôî ÎÇ¥Ïö©ÏùÄ Î™®Îëê Ï¥àÍ∏∞Ìôî Îê©ÎãàÎã§.");
                    });
                } 
                else {
                    swal("Ï∑®ÏÜå ÎêòÏóàÏäµÎãàÎã§! Îã§Ïãú Ìïú Î≤à Raffle Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî!", {
                        icon: "success",
                    });
                }
            });
        });
    });


    // chat-log-li ÏóêÎäî this(target-data-id) keyÏóê Îî∞Î•∏ Ï±ÑÌåÖ Î°úÍ∑∏ pop up
    const addChatRequest = () => {
        // Get ALL Target DOM
        const targetList = document.querySelectorAll(".chat-log-li");
        // add Event
        targetList.forEach(target => {
            target.addEventListener('click', (event) => {
                // WAIT MODAL 
                swal("¬∑¬∑¬∑¬∑¬∑WAIT¬∑¬∑¬∑¬∑¬∑");

                const targetId = event.target.getAttribute('target-data-id');
                ajaxCustom(`/api/chat/${targetId}`, "GET", null, (response) => {

                    // make list of chat by str
                    let listOfChat = "";
                    for (let i = 0; i < response['result'].length; i++) {
                        const element = response['result'][i];
                        listOfChat += `${element['created_at']} : ${element['message']} \n`;
                    }

                    // success
                    swal(`${targetId}'s Chat List`, `${listOfChat}`);
                });
            });
        })
    }

    // Long Polling
    /*
     https://developer.mozilla.org/ko/docs/Glossary/IIFE
     Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï≤òÎ¶¨Ï§ë Ïª§ÎÑ•ÏÖò ÌíÄ Í∏∞Î≤ïÏù¥ ÏûàÎäîÎç∞ ÎπÑÏä∑Ìïú Í∞úÎÖêÏù¥Îã§. 
     ÏÑúÎ≤ÑÏôÄ Ï†ëÏÜçÏùÑ Ïó¥Ïñ¥Îëî ÏÉÅÌÉúÏóêÏÑú ÏöîÏ≤≠Ïù¥ Ïò§Î©¥ Î∞îÎ°ú Î∞îÎ°ú Ï≤òÎ¶¨ÌïúÎã§. 
     ÏöîÏ≤≠Ïù¥ ÏóÜÏùÑÏãúÏóêÎäî Î¶¨ÏÜåÏä§Î•º Í±∞Ïùò Î®πÏßÄÏïäÎäîÎã§.
    */
    let originDashBoardData = {};
    (function boardUpdate() {
        $.ajax({
            url: '/api/chats/live',
            type: 'GET',
            dataType: 'json',
            success: (response) => {
                if (originDashBoardData != response["result"]) {                    
                    // 1. mainÏùò ul Î™®Îëê ÏÇ≠Ï†ú
                    const targetUl = randerTarget.querySelectorAll('ul');
                    for (let i = 0; i < targetUl.length; i++) targetUl[i].remove();
    
                    // 2. Ï†ïÎ†¨Îêú Í∞í Í∏∞Ï§ÄÏúºÎ°ú ÎûúÎçîÎßÅ 
                    for (let i = 0; i < response["result"].length; i++) {
                        const element = response["result"][i];
                        $('div.main').append(
                            `
                            <ul class="list-group list-group-horizontal leader-board-list">
                                <li class="list-group-item"># ${(i + 1)}</li>
                                <li class="list-group-item chat-log-li" target-data-id="${element["_id"]}">${element["_id"]}</li>
                                <li class="list-group-item chat-cnt-li" target-data-id="${element["_id"]}">${element["count"]}</li>
                            </ul>
                            `
                        );
                    }
                    // 3. add event
                    addChatRequest();
                }

            },
            error: function (e) {
                console.log("ERROR : ", e);
            },
            timeout: 2000,
            complete: setTimeout(function () { boardUpdate(); }, 3000)
        })
    })();
</script>

</html>