<!DOCTYPE html>
<html lang="ko">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="stylesheets/style.css">
    <link rel="stylesheet" href="library/bootstrap/css/bootstrap.min.css">
    <script src="library/jquery/jquery.min.js"></script>
    <script src="library/sweetalert.min.js"></script>
    <title>AmnotifyKR Login</title>
</head>

<body>
    <div class="main">
        <div>
            <button>Init</button>
            <button>On/Off</button>
            <button>Setting</button>
            <button>Raffle</button>
        </div>
        <!-- <ul class="list-group list-group-horizontal">
            <li class="list-group-item">#1</li>
            <li class="list-group-item">qlgks1</li>
            <li class="list-group-item">50</li>
        </ul> -->
    </div>
</body>
<script>
    const randerTarget = document.querySelector(".main");

    // Long Polling
    /*
     데이터베이스 처리중 커넥션 풀 기법이 있는데 비슷한 개념이다. 서버와 접속을 열어둔 상태에서 요청이 오면 바로 바로 처리한다. 
     요청이 없을시에는 리소스를 거의 먹지않는다. 아래의 원문을 보면 이해가 쉬울 것 같다.
    */
    (function boardUpdate() {
        $.ajax({
            url: '/api/live',
            type: 'GET',
            dataType: 'json',
            success: function (response) {
                // 1. main의 ul 모두 삭제
                const targetUl = randerTarget.querySelectorAll('ul');
                for (let i = 0; i < targetUl.length; i++) targetUl[i].remove();

                // 2. 받아온 result 값 value기반으로 정렬 
                const sortedResult = Object.entries(response['result'])
                    .sort(([, a], [, b]) => b - a)
                    .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});

                // 3. 정렬된 값 기준으로 랜더링 
                let cnt = 1; // rank
                for (const [key, value] of Object.entries(sortedResult)) {
                    $('div.main').append(
                    `
                    <ul class="list-group list-group-horizontal">
                        <li class="list-group-item">${cnt++}</li>
                        <li class="list-group-item chat-log-li" target-data-id="${key}">${key}</li>
                        <li class="list-group-item chat-cnt-li" target-data-id="${key}">${value}</li>
                    </ul>
                    `
                    );
                }
            },
            error: function (e) {
                console.log("ERROR : ", e);
            },
            timeout: 2000,
            complete: setTimeout(function () { boardUpdate(); }, 3000)
        })
    })();

    // chat-log-li 에는 this(target-data-id) key에 따른 채팅 로그 pop up

    // chat-cnt-li 에는 this(target-data-id) key에 따른 cnt update가능

    // init 

    // on / off 

    // setting (configue set up / nick-name, channel, oauth-token)

    // raffle ~ run python3 process

</script>

</html>